# -*- coding: utf-8 -*-
"""classify1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xyNILpSyDVvOJUhgvPIsos_I7lFQrw4f
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/cancer_classification.csv')

df.head()

df.isna().sum()

df.describe().transpose()

sns.countplot(x='benign_0__mal_1',data=df)

df.corr()['benign_0__mal_1'].plot(kind='bar')

plt.figure(figsize=(12,12))
sns.heatmap(df.corr())

X=df.drop('benign_0__mal_1',axis=1).values
y=df['benign_0__mal_1'].values

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=10)

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()

X_train = scaler.fit_transform(X_train)

X_test = scaler.transform(X_test)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Dropout

X_train.shape

type(y_train)

model=Sequential()
model.add(Dense(30,activation='relu'))
model.add(Dense(15,activation='relu'))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer= 'adam', metrics=['accuracy'])

model.fit(x=X_train,y=y_train,epochs = 600,validation_data=(X_test,y_test))

loss=pd.DataFrame(model.history.history)

loss.plot()

model=Sequential()
model.add(Dense(30,activation='relu'))
model.add(Dense(15,activation='relu'))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer= 'adam', metrics=['accuracy'])

from tensorflow.keras.callbacks import EarlyStopping

help(EarlyStopping)

loss

early_stop=EarlyStopping(monitor='val_loss',mode = 'min',verbose=1,patience=25)

model.fit(x=X_train,y=y_train,epochs = 600,validation_data=(X_test,y_test),
          callbacks=[early_stop])

loss1=pd.DataFrame(model.history.history)

loss1.plot()

model=Sequential()
model.add(Dense(30,activation='relu'))
model.add(Dropout(rate=0.3))
model.add(Dense(15,activation='relu'))
model.add(Dropout(rate=0.3))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer= 'adam', metrics=['accuracy'])

model.fit(x=X_train,y=y_train,epochs = 600,validation_data=(X_test,y_test),
          callbacks=[early_stop])

loss2=pd.DataFrame(model.history.history)

loss2.plot()

pred=model.predict_classes(X_test)

from sklearn.metrics import classification_report,confusion_matrix

print(classification_report(y_test,pred))

print(confusion_matrix(y_test,pred))

